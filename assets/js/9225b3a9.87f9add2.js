"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[446],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return s}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(t),s=i,f=m["".concat(p,".").concat(s)]||m[s]||u[s]||a;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function s(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5142:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],l={sidebar_position:5,sidebar_label:"\u2699 Configuration",hide_title:!0},p=void 0,c={unversionedId:"config",id:"config",title:"config",description:"Configuration",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/dbzar/docs/config",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/config.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"\u2699 Configuration",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"\u2705 Supported Databases",permalink:"/dbzar/docs/supported_dbs"},next:{title:"\ud83d\udcc3 API",permalink:"/dbzar/docs/api"}},d=[{value:"Configuration",id:"configuration",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Structure",id:"structure",children:[{value:"Table",id:"table",children:[],level:3},{value:"Column",id:"column",children:[],level:3},{value:"ProviderType",id:"providertype",children:[],level:3},{value:"Provider",id:"provider",children:[],level:3}],level:2}],u={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"dbzar can be configured by creating on the configuration\nfiles below which identifies how to anonymize a database"),(0,a.kt)("p",null,"Create any one of these files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".dbzarrc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".dbzarrc.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".dbzarrc.yaml")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".dbzarrc.yml")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".dbzarrc.js")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".dbzarrc.cjs")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dbzar.config.js")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dbzar.config.cjs"))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'// .dbzarrc\nuri:  mongodb://example:example@localhost\ndbName: db1\ntables:\n  - name: users\n    columns:\n      - name: firstName\n        provider: mask\n      - name: lastName\n        provider:\n          type: mask\n          options:\n            character: "#"\n  - name: products\n    columns:\n      - name: name\n        provider: fake\n      - name: price\n        provider:\n          type: random_number\n          options: { min: 100, max: 999 }\n')),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"uri"),"*"," (string) - connection string, where to connect to"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"dbName"),"*"," (string) - database name to process"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"tables")," (list of ",(0,a.kt)("inlineCode",{parentName:"li"},"Table"),") - tables to process within the database")),(0,a.kt)("h3",{id:"table"},"Table"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"name"),"*"," (string) - table name"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"columns"),"*"," (list of ",(0,a.kt)("inlineCode",{parentName:"li"},"Column"),") - columns to be processed")),(0,a.kt)("h3",{id:"column"},"Column"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name"),"*"," (string) - column name"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"provider")," - (",(0,a.kt)("inlineCode",{parentName:"li"},"ProviderType")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"Provider"),") - how to anonymize the column.")),(0,a.kt)("h3",{id:"providertype"},"ProviderType"),(0,a.kt)("p",null,"An enum (string) with one of the fields: ",(0,a.kt)("inlineCode",{parentName:"p"},"mask"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"fake"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"scramble")),(0,a.kt)("h3",{id:"provider"},"Provider"),(0,a.kt)("p",null,"Contains a more detailed provider with options"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"type"),"*"," (",(0,a.kt)("inlineCode",{parentName:"li"},"ProviderType"),") - type of the provider"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"options")," - provider options, see the different ",(0,a.kt)("a",{parentName:"li",href:"/docs/providers"},"providers")," for more info")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"*")," - required field"))}m.isMDXComponent=!0}}]);